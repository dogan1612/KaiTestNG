In TestNG, we can automatically stop executing a test if it gets stuck or takes longer than expected time to complete.
This functionality is enabled using the “timeOut” attribute of @Test annotation.

@Test ( timeOut = 1000 ) //Time in milliseconds

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TestNG offers a feature that allows us to make a method depend on another for execution.
So if a dependent method fails, all the subsequent methods would be skipped.
Dependency can be specified using annotations or in testng.xml file.
These methods would only work if the dependent method is part of the same class or in one of the inherited class.

@Test(dependsOnMethods = { "TestB", "TestC" })
public void TestA() {
    System.out.println("Test A");
}

***

public class DependencyDemo {
    @Test(dependsOnGroups = { "GroupB", "GroupC" })
    public void TestA() {
        System.out.println("Test A");
    }

    @Test(dependsOnMethods="TestC", groups = { "GroupB" })
    public void TestB() {
        System.out.println("Test B");
    }

    @Test(groups = { "GroupC" })
    public void TestC() {
        System.out.println("Test C");
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

How to deal with <select> drop down?

Step 1. Find this dropdown by some locator and create webelement.
Step 2. Create an object of Select class.
Step 3. Provide webelement from Step 1 into constructor of Select object.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

How to Run a Test Case multiple times with different Values as Input?

In TestNG, there’s a concept known as data driven testing, which allows testers to automatically
run a test case multiple times, with different input and validation values.
In such cases parameters can be passed using Dataproviders.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

manage window:

      full screren:  driver.manage().window().fullscreen();
      maximize: driver.manage().window().maximize();
      setSize:    driver.manage().window().setSize(  new Dimension(10,20) );

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As selenium testers, we use testng for writing, organizing,
asserting and running selenium scripts.
TestNG helps us to group tests, create test suites. Perform data
driven testing (DDT).

@Test - it calls annotation. This annotation will turn method into
test. So we don't need main method to run our code. We can put this
annotation and run method as a test.

@BeforeClass - method with this annotation will be running only once in the class, regardless of amount of tests. What we can put in this method?
	 prepare test data
	 create connections
	 initialize driver
	 set webdriver properties

@BeforeMethod -> it will run method before every test method, regardless if other tests failed or passed. We can do following things:
	 prepare test data
	 open browser
	 create connections
	 open some URL
	 Login

@AfterMethod -> method with this annotation will always run after every test method regardless if test failed or passed.
What kind of things we can do:
	close/quit browser
	log out
	close connections (related to JDBC)
	generate report

For these method we always use public void methods. No static.

@Test (priority = 0)
Lower number - higher priority.
By default, priority is set to 0. If @Test doesn't have a priority - then TestNG will set priority based on alphabetic order.